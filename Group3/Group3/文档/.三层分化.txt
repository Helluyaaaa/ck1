用户界面层：
1.为用户提供与应用程序交互的方式（比如：桌面窗口和控件、网页或者带有命令行或菜单的控制台应用程序）
2.向用户展示数据和信息
3.接收用户的查询或命令请求
4.验证用户的输入

业务逻辑层
1.处理来自用户界面层的命令
2.为业务域的流程、规则和工作流建模

数据访问层
1.响应数据查询请求
2.序列化对象模型到关系模型，反序列化关系模型到对象模型


*****注意事项*****
1.用户界面层：
用户界面层也可以使用数据访问层的功能，但不应直接引用数据访问层具体实现所在的程序集（程序集包含托管模块（IL中间语言和元素局）和资源的文件，即你编写的项目生成的dll或者exe文件）。这应该划分为接口和实现程序集
2.数据访问层:
访问层通常包含持久数据存储器，如SQL Server等关系型数据库，也可以如RavenDB等文档型数据库。可能包含一个或多个辅助程序集，这些辅助程序集要么调用存储过程来执行CRUD，要么通过EF框架或NHibernate将数据映射到关系型数据库。但是这些所有的接口都应该隐藏所有与技术相关的事情，也不应该引入任何对第三方的依赖，这样使得客户端完全不受具体实现选择的影响。
设计良好的数据应用层能够在多个应用程序中重用。

/*两层合适的应用场景：
1.应用程序只有一些琐碎的数据验证，且没有多少业务逻辑。
2.应用程序主要执行CRUD操作
3.时间仓促
两层不适合的应用场景：
1.应用程序预期或者已确定会有复杂的业务逻辑
2.应用程序已明确在一个两个冲刺以后会需要多于两层的架构。*/